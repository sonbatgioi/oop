Đặc tính kế thừa 
Cho phép định nghĩa lớp mới từ lớp đã có.
lớp mới gọi là lớp con(subclass) hay lớp dẫn xuất(derived class)
lớp đã có gọi là lớp cha(superclass) hay lớp cơ sở(base class).
* nhiều lớp có thể dẫn xuất từ 1 lớp cơ sở
* 1 lớp có thể là dẫn xuất của nhiều lớp cơ sở => 1 cha có nhiều con
thừa kế cho phép:
thừa kế không chỉ giới hạn ở 1 mức: một lớp dẫn xuất có thể là lớp cơ sở cho các lớp dẫn xuất khác
=> 1 lớp cha ngoài có con ra, còn có cháu
Cú pháp:
class SuperClass{
  //thành phần lớp cơ sở
};
class DerivedClass public/protected/private SusperClass{
  //Thành phần bổ sung của lớp dẫn xuất
};

    #include<iostream>
    #include<string>
    using namespace std;
    class Nguoi
    {
      int NamSinh;
      string Ten;
    public:
      Nguoi() {}
      Nguoi(int namsinh, string ten)
      {
        NamSinh = namsinh;
        Ten = ten;
      }
      void An()
      {
        cout << Ten << "an 2kg gao 1 ngay";
      }
      void Xuat()
      {
        cout << "\n Nguoi" << "ho ten: " << Ten;
      }
    };
    class SinhVien : public Nguoi
    {
      string MSSV;
    public:
      SinhVien() {}
      SinhVien(int namsinh, string ten, string maso): Nguoi(namsinh, ten)
      {
        MSSV = maso;
        Nguoi::An();//truy xuất đến hàm lớp cha
      }
      void Xuat()
      {
        cout << "\n MSSV= " << MSSV;
      }
    };
    int main()
    {
      SinhVien SV(1996, "Khoa", "1683483");
      SV.An();
      system("pause");
      return 0;
    }
    
PHẠM VI TRUY XUẤT


    #include<iostream>
    using namespace std;
    class Base
    {
    public:
      int m_nPublic;
    private:
      int m_nPrivate;
    protected:
      int m_nProtected;
    };

    class Pro : protected Base // kiểu kế thừa protected
    {
      // private inheritated means:
      // m_nPublic becomes protected
      // m_nPrivate stays private
      // m_nProtected becomes protected
      Pro()
      {
        m_nPublic = 1; // okay: anybody can accesss public members
        m_nPrivate = 2; // not okay: derived classes can't access private members in the basse class!
        m_nProtected = 3; // okay: derived classes can access protected members
      }
    };
    int main()
    {
      // Outside access uses the access specifiers of the class being accessed.
      // Note that because Pri has inherited privately from Base.
      // all members of Base have become private when access through Pri.
      Pri cPri;
      cPri.m_nPublic = 1; // not okay: m_nPublic is now a private member when accessed through Pri
      cPri.m_nprivate = 2; // not okay: can not access private members from outside class
      cPri.m_nProtected = 3; // not okay: m_nProtected is now a private member when accessed through  
      // however, we can stll access Base members as normal through Base:
      Base cBase;
      cBase.m_nPublic = 1; // okay, m_nPublic is public
      cBase.m_nPrivate = 2; // not oka,m_nPrivate is private
      cBase.m_nProtected = 3; // not okay, m_nProtected is protected
    }

 Bài toán: Công ty ABC là công ty sản xuất kinh doanh thú nhồi bông. Công ty có nhiều nhân viên
làm việc trong ba bộ phận khác nhau: bộ phận quản lý, bộ phận sản xuất, bộ phận văn phòng.
Việc tính lương cho nhân viên dựa vào các yếu tố sau:
 Đối với nhân viên văn phòng: Lương = Lương Cơ Bản + Số ngày làm việc *100.000 + Trợ
Cấp
 Đối với nhân viên sản xuất: Lương = Lương Cơ Bản + Số Sản Phẩm * 2.000
 Đối với nhân viên quản lý: Lương = Lương Cơ Bản* Hệ số chức vụ + Thưởng.
 Ngoài ra công ty cần quản lý các thông tin về nhân viên của mình như: họ tên, ngày sinh và các
thông số trên để tính lương cho từng nhân viên trong công ty.
 Yêu cầu: Thiết kế các lớp thích hợp để thực hiện các yêu cầu sau:
 Nhập thông tin của các nhân viên để phục vụ cho việc tính lương.
 Thực hiện việc tính lương cho từng nhân viên.
 Xuất thông tin của các nhân viên.
 Tính tổng lương của công ty.
 Tìm kiếm một nhân viên theo họ tên.

    #include<iostream>
    #include<string>
    #include<string.h>
    using namespace std;
    class NhanVien
    {
    protected:
      string HoTen;
      string NgaySinh;
      float LuongCoBan;
      float Luong;
    public:
      void Nhap()
      {
        fflush(stdin);
        cout << "Ho ten: "; 
        getline(cin, HoTen);
        fflush(stdin);
        cout << "Ngay sinh: ";
        getline(cin,NgaySinh);
        cout << "Luong co ban: ";
        cin >> LuongCoBan;
        cout << "Luong: ";
        cin >> Luong;
      }
      void Xuat()
      {
        cout << HoTen << "\t" << NgaySinh << "\t" << LuongCoBan << "\t" << Luong;
      }

    };
    class NVVanPhong : public NhanVien
    {
    protected:
      int SoNgayLamViec;
      float TroCap;
    public:
      void Nhap()
      {
        NhanVien::Nhap();
        cout << "So ngay lam viec: ";
        cin >> SoNgayLamViec;
        cout << "Tro cap: ";
        cin >> TroCap;
      }
      void Xuat()
      {
        NhanVien::Xuat();
        cout <<"\t"<< SoNgayLamViec << "\t" << TroCap;
      }
      float TinhLuong()
      {
        Luong = LuongCoBan + SoNgayLamViec * 100000 + TroCap;
        return Luong;
      }
    };
    class NVSanXuat : public NhanVien
    {
    private:
      int SoSanPham;
    public: 
      void Nhap()
      {
        NhanVien::Nhap();
        cout << "So san pham: ";
        cin >> SoSanPham;
      }
      void Xuat()
      {
        NhanVien::Xuat();
        cout << "\t" << SoSanPham;
      }
      float TinhLuong()
      {
        Luong = LuongCoBan + SoSanPham * 2000;
        return Luong;
      }
    };
    class NVQuanLi : public NhanVien
    {
    protected:
      float HeSo;
      float Thuong;
    public:
      void Nhap()
      {
        NhanVien::Nhap();
        cout << "He so: ";
        cin >> HeSo;
        cout << "Thuong: ";
        cin >> Thuong;
      }
      void Xuat()
      {
        NhanVien::Xuat();
        cout <<"\t"<< HeSo << "\t" << Thuong;
      }
      float TinhLuong()
      {
        Luong = LuongCoBan * HeSo + Thuong;
        return Luong;
      }
    };
    int main()
    {
      NhanVien NV;
      NVVanPhong NVVP;
      NVVP.Nhap();
      NVVP.Xuat();
      NVSanXuat NVSX;
      NVSX.Nhap();
      NVSX.Xuat();
      NVQuanLi NVQL;
      NVQL.Nhap();
      NVQL.Xuat();
      float luong = NVQL.TinhLuong();
      cout <<"\n"<< (size_t)luong;
      system("pause");
      return 0;
    }